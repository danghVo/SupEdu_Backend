generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid               String               @id @default(uuid())
  email              String               @unique
  password           String
  name               String
  age                Int
  avatar             String?
  isOnline           Boolean              @default(false)
  refreshToken       String?
  createAt           DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isVerify           Boolean              @default(false)
  verifyToken        String?
  role               UserRole
  class              Class[]
  comment            Comment[]
  groups         UserInGroup[]          
  userAssignExercise UserAssignExercise[]
  userChooesOption   UserChooesOption[]
  userJoinClass      UserJoinClass[]
  Message            Message[]
  Notification       Notification[]
  UserReadMessage    UserReadMessage[]
}

model Notification {
  uuid          String   @id @default(uuid())
  userUuid      String
  title         String
  message       String
  isRead        Boolean  @default(false)
  link          String
  createdInTime String
  createdInDate String
  createdAt     DateTime @default(now())
  user          User     @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
}

model Class {
  uuid                 String          @id @default(uuid())
  name                 String
  description          String?
  password             String?
  theme                String?
  textColor            String?         @default("black")
  requireApprove       Boolean         @default(false)
  owner                User?           @relation(fields: [createdByTeacherUuid], references: [uuid], onDelete: Cascade)
  createdByTeacherUuid String
  userJoinClass        UserJoinClass[]
  posts                Post[]
  createdAt            DateTime        @default(now())
  updatedAt            DateTime        @updatedAt
}

model File {
  uuid                   String              @id @default(uuid())
  name                   String
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  extension              String
  postUuid               String?
  userAssignExerciseUuid String?
  post                   Post?               @relation(fields: [postUuid], references: [uuid], onDelete: Cascade)
  userAssignExercise     UserAssignExercise? @relation(fields: [userAssignExerciseUuid], references: [uuid], onDelete: Cascade)
}

model Comment {
  uuid          String @id @default(uuid())
  userUuid      String
  postUuid      String
  content       String
  createdInTime String
  createdInDate String
  post          Post   @relation(fields: [postUuid], references: [uuid], onDelete: Cascade)
  user          User   @relation(fields: [userUuid], references: [uuid])
}

model Option {
  uuid             String             @id @default(uuid())
  voteUuid         String
  value            String
  voteData         VoteData           @relation(fields: [voteUuid], references: [uuid], onDelete: Cascade)
  userChooesOption UserChooesOption[]
}

model UserChooesOption {
  userUuid   String
  optionUuid String?
  voteUuid   String
  Vote       VoteData @relation(fields: [voteUuid], references: [uuid], onDelete: Cascade)
  option     Option?  @relation(fields: [optionUuid], references: [uuid], onDelete: SetNull)
  user       User     @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@id([userUuid, voteUuid])
}

model VoteData {
  uuid             String             @id @default(uuid())
  options          Option[]
  post             Post               @relation(fields: [postUuid], references: [uuid], onDelete: Cascade)
  postUuid         String             @unique
  UserChooesOption UserChooesOption[]
}

model Post {
  uuid               String               @id @default(uuid())
  title              String
  content            String?
  type               PostType
  postInTime         String
  postInDate         String
  endInTime          String?
  endInDate          String?
  class              Class                @relation(fields: [classUuid], references: [uuid], onDelete: Cascade)
  classUuid          String
  comments           Comment[]
  files              File[]
  userAssignExercise UserAssignExercise[]
  voteData           VoteData?
}

model UserAssignExercise {
  uuid         String        @id @default(uuid())
  postUuid     String
  userUuid     String
  feedback     String
  score        Int
  status       AssignStatus?
  isMarked     Boolean       @default(false)
  assignInTime String?
  assignInDate String?
  assignFiles  File[]
  post         Post          @relation(fields: [postUuid], references: [uuid], onDelete: Cascade)
  user         User          @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
}

model UserJoinClass {
  userUuid  String
  classUuid String
  status    JOINSTATUS
  class     Class      @relation(fields: [classUuid], references: [uuid], onDelete: Cascade)
  user      User       @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@id([userUuid, classUuid])
}

model ApiPermission {
  id        Int             @id @default(autoincrement())
  api       String
  action    String
  role      PertmissionRole
  condition String?
}

model GroupChat {
  uuid             String            @id @default(uuid())
  name             String?
  avatar           String?
  lastMessageUuid String?
  messages          Message[]
  users             UserInGroup[]
}

model UserInGroup {
  userUuid    String
  groupChatUuid String
  groupChat   GroupChat @relation(fields: [groupChatUuid], references: [uuid], onDelete: Cascade)
  user        User      @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)

  @@id([userUuid, groupChatUuid])
}

model UserReadMessage {
  userUuid      String
  messageUuid   String
  readInTime    String?
  readInDate    String?
  user          User      @relation(fields: [userUuid], references: [uuid], onDelete: Cascade)
  message       Message   @relation(fields: [messageUuid], references: [uuid], onDelete: Cascade)

  @@id([userUuid, messageUuid])
}

model Message {
  uuid            String            @id @default(uuid())
  fromUserUuid    String?
  fromUser        User?             @relation(fields: [fromUserUuid], references: [uuid], onDelete: Cascade)
  content         String
  sendInTime      String
  sendInDate      String
  sendIn          DateTime        @default(now())
  groupChatUuid   String?
  groupChat       GroupChat?        @relation(fields: [groupChatUuid], references: [uuid])
  UserReadMessage UserReadMessage[]
}

enum UserRole {
  TEACHER
  STUDENT
}

enum PostType {
  Exercise
  Announcement
  Vote
}

enum JOINSTATUS {
  PENDING
  JOINED
}

enum PertmissionRole {
  TEACHER
  STUDENT
  ALL
}

// enum MessageStatus {
//   SENT
//   RECEIVED
// }

enum AssignStatus {
  ONTIME
  LATE
}
